"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class optitrack_rigid_body_t(object):
    __slots__ = ["id", "xyz", "quat", "num_markers", "marker_xyz", "marker_ids", "marker_sizes", "mean_error", "params"]

    def __init__(self):
        self.id = 0
        self.xyz = [ 0.0 for dim0 in range(3) ]
        self.quat = [ 0.0 for dim0 in range(4) ]
        self.num_markers = 0
        self.marker_xyz = []
        self.marker_ids = []
        self.marker_sizes = []
        self.mean_error = 0.0
        self.params = 0

    def encode(self):
        buf = BytesIO()
        buf.write(optitrack_rigid_body_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.id))
        buf.write(struct.pack('>3f', *self.xyz[:3]))
        buf.write(struct.pack('>4f', *self.quat[:4]))
        buf.write(struct.pack(">i", self.num_markers))
        for i0 in range(self.num_markers):
            buf.write(struct.pack('>3f', *self.marker_xyz[i0][:3]))
        buf.write(struct.pack('>%di' % self.num_markers, *self.marker_ids[:self.num_markers]))
        buf.write(struct.pack('>%df' % self.num_markers, *self.marker_sizes[:self.num_markers]))
        buf.write(struct.pack(">fh", self.mean_error, self.params))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != optitrack_rigid_body_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return optitrack_rigid_body_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = optitrack_rigid_body_t()
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.xyz = struct.unpack('>3f', buf.read(12))
        self.quat = struct.unpack('>4f', buf.read(16))
        self.num_markers = struct.unpack(">i", buf.read(4))[0]
        self.marker_xyz = []
        for i0 in range(self.num_markers):
            self.marker_xyz.append(struct.unpack('>3f', buf.read(12)))
        self.marker_ids = struct.unpack('>%di' % self.num_markers, buf.read(self.num_markers * 4))
        self.marker_sizes = struct.unpack('>%df' % self.num_markers, buf.read(self.num_markers * 4))
        self.mean_error, self.params = struct.unpack(">fh", buf.read(6))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if optitrack_rigid_body_t in parents: return 0
        tmphash = (0x27857de0698bcba4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if optitrack_rigid_body_t._packed_fingerprint is None:
            optitrack_rigid_body_t._packed_fingerprint = struct.pack(">Q", optitrack_rigid_body_t._get_hash_recursive([]))
        return optitrack_rigid_body_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

