"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import optitrack.optitrack_rigid_body_description_t

import optitrack.optitrack_marker_set_description_t

class optitrack_data_descriptions_t(object):
    __slots__ = ["num_marker_sets", "marker_sets", "num_rigid_bodies", "rigid_bodies"]

    def __init__(self):
        self.num_marker_sets = 0
        self.marker_sets = []
        self.num_rigid_bodies = 0
        self.rigid_bodies = []

    def encode(self):
        buf = BytesIO()
        buf.write(optitrack_data_descriptions_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_marker_sets))
        for i0 in range(self.num_marker_sets):
            assert self.marker_sets[i0]._get_packed_fingerprint() == optitrack.optitrack_marker_set_description_t._get_packed_fingerprint()
            self.marker_sets[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_rigid_bodies))
        for i0 in range(self.num_rigid_bodies):
            assert self.rigid_bodies[i0]._get_packed_fingerprint() == optitrack.optitrack_rigid_body_description_t._get_packed_fingerprint()
            self.rigid_bodies[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != optitrack_data_descriptions_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return optitrack_data_descriptions_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = optitrack_data_descriptions_t()
        self.num_marker_sets = struct.unpack(">i", buf.read(4))[0]
        self.marker_sets = []
        for i0 in range(self.num_marker_sets):
            self.marker_sets.append(optitrack.optitrack_marker_set_description_t._decode_one(buf))
        self.num_rigid_bodies = struct.unpack(">i", buf.read(4))[0]
        self.rigid_bodies = []
        for i0 in range(self.num_rigid_bodies):
            self.rigid_bodies.append(optitrack.optitrack_rigid_body_description_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if optitrack_data_descriptions_t in parents: return 0
        newparents = parents + [optitrack_data_descriptions_t]
        tmphash = (0x13b816d16b8f54a+ optitrack.optitrack_marker_set_description_t._get_hash_recursive(newparents)+ optitrack.optitrack_rigid_body_description_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if optitrack_data_descriptions_t._packed_fingerprint is None:
            optitrack_data_descriptions_t._packed_fingerprint = struct.pack(">Q", optitrack_data_descriptions_t._get_hash_recursive([]))
        return optitrack_data_descriptions_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

